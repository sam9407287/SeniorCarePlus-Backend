ktor {
    deployment {
        port = 8080
        host = "0.0.0.0"
        
        # 生產環境配置
        environment = development
        
        # 自動重載（開發環境）
        autoreload = true
        
        # 監視路徑
        watch = [
            "src/main/kotlin",
            "src/main/resources"
        ]
    }
    application {
        modules = [ com.seniorcareplus.ApplicationKt.module ]
    }
    
    # 開發模式配置
    development = true
}

database {
    postgresql {
        url = "jdbc:postgresql://localhost:5432/seniorcareplus"
        driver = "org.postgresql.Driver"
        user = "postgres"
        password = "password"
        
        # 連接池配置
        maximumPoolSize = 10
        minimumIdle = 2
        connectionTimeout = 30000
        idleTimeout = 600000
        maxLifetime = 1800000
        leakDetectionThreshold = 60000
        
        # 性能配置
        cachePrepStmts = true
        prepStmtCacheSize = 250
        prepStmtCacheSqlLimit = 2048
    }
    h2 {
        url = "jdbc:h2:mem:seniorcareplus;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE"
        driver = "org.h2.Driver"
        user = "sa"
        password = ""
    }
    
    # 使用的數據庫類型 (postgresql 或 h2)
    type = "postgresql"
}

mqtt {
    broker {
        url = "tcp://localhost:1883"
        clientId = "SeniorCarePlusBackend"
        username = ""
        password = ""
        
        # 連接配置
        cleanSession = true
        connectionTimeout = 30
        keepAlive = 60
        automaticReconnect = true
        maxInFlight = 10
        
        # 重連配置
        reconnectDelay = 5000
        maxReconnectDelay = 30000
    }
    
    # 主題前綴
    topicPrefix = "seniorcareplus"
    
    # QoS級別
    qos = 1
}

websocket {
    # Ping 間隔 (秒)
    pingPeriod = 15
    
    # 超時時間 (秒)
    timeout = 15
    
    # 最大框架大小
    maxFrameSize = 65536
    
    # 是否使用遮罩
    masking = false
    
    # 最大連接數
    maxConnections = 1000
}

logging {
    level = "INFO"
    
    # 特定包的日誌級別
    loggers {
        "com.seniorcareplus" = "DEBUG"
        "io.ktor" = "INFO"
        "org.eclipse.paho" = "INFO"
        "com.zaxxer.hikari" = "INFO"
        "org.postgresql" = "INFO"
    }
    
    # 日誌格式
    pattern = "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    
    # 日誌文件配置
    file {
        enabled = true
        path = "logs/seniorcareplus.log"
        maxFileSize = "10MB"
        maxHistory = 30
    }
}

health {
    # 數據採集間隔 (毫秒)
    collection {
        heartRate = 5000
        temperature = 10000
        bloodPressure = 30000
        location = 1000
        battery = 60000
    }
    
    # 警報閾值
    alerts {
        heartRate {
            min = 50
            max = 120
        }
        temperature {
            min = 35.0
            max = 38.5
        }
        bloodPressure {
            systolic {
                min = 90
                max = 160
            }
            diastolic {
                min = 60
                max = 100
            }
        }
        battery {
            low = 20
            critical = 10
        }
    }
}

location {
    # 位置更新間隔 (毫秒)
    updateInterval = 1000
    
    # 位置精度 (米)
    accuracy = 0.5
    
    # 歷史記錄保留天數
    historyRetentionDays = 30
    
    # 設備離線判定時間 (秒)
    deviceOfflineTimeout = 60
    
    # 坐標系配置
    coordinate {
        # 地圖邊界 (米)
        bounds {
            minX = 0.0
            maxX = 100.0
            minY = 0.0
            maxY = 80.0
        }
        
        # 樓層配置
        floors = [1, 2, 3]
        defaultFloor = 1
    }
}

api {
    # 版本
    version = "1.2.0"
    
    # 請求限制
    rateLimit {
        enabled = true
        requestsPerMinute = 100
        requestsPerHour = 1000
    }
    
    # CORS 配置
    cors {
        allowedHosts = ["localhost", "127.0.0.1", "192.168.1.*"]
        allowedMethods = ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
        allowedHeaders = ["Content-Type", "Authorization", "X-Requested-With"]
        allowCredentials = true
    }
    
    # 分頁配置
    pagination {
        defaultPageSize = 20
        maxPageSize = 100
    }
}

security {
    # JWT 配置
    jwt {
        secret = "your-jwt-secret-key-change-in-production"
        issuer = "seniorcareplus"
        audience = "seniorcareplus-users"
        expirationHours = 24
    }
    
    # API 密鑰
    apiKeys {
        mobile = "your-mobile-api-key"
        web = "your-web-api-key"
    }
    
    # 加密配置
    encryption {
        algorithm = "AES"
        keyLength = 256
    }
}

performance {
    # 緩存配置
    cache {
        enabled = true
        maxSize = 1000
        expireAfterWrite = 300 # 秒
    }
    
    # 線程池配置
    threadPool {
        coreSize = 4
        maxSize = 20
        keepAliveTime = 60 # 秒
    }
    
    # 數據處理配置
    dataProcessing {
        batchSize = 100
        processInterval = 1000 # 毫秒
    }
}

notifications {
    # 推送服務配置
    push {
        enabled = true
        provider = "firebase" # firebase, apns, etc.
        
        firebase {
            serverKey = "your-firebase-server-key"
            senderId = "your-firebase-sender-id"
        }
    }
    
    # 警報通知配置
    alerts {
        # 立即通知的警報類型
        immediate = ["critical_health", "emergency_button", "device_offline"]
        
        # 批量通知的警報類型
        batch = ["low_battery", "location_boundary"]
        
        # 批量通知間隔 (分鐘)
        batchInterval = 15
    }
}

devices {
    # 支持的設備類型
    supportedTypes = ["300B", "DiaperDV1", "Pedo", "UWB_Tag", "UWB_Anchor"]
    
    # 設備註冊配置
    registration {
        autoApprove = false
        requireManualApproval = true
    }
    
    # 固件更新配置
    firmware {
        updateCheckInterval = 3600 # 秒
        autoUpdate = false
        backupBeforeUpdate = true
    }
}

backup {
    # 自動備份
    automatic {
        enabled = true
        interval = "daily" # hourly, daily, weekly
        time = "02:00" # 24小時格式
        retention = 7 # 保留天數
    }
    
    # 備份存儲
    storage {
        type = "local" # local, s3, gcs
        path = "/backup/seniorcareplus"
    }
}

environments {
    development {
        debug = true
        mockData = true
        logLevel = "DEBUG"
    }
    
    staging {
        debug = false
        mockData = false
        logLevel = "INFO"
    }
    
    production {
        debug = false
        mockData = false
        logLevel = "WARN"
        
        # 生產環境安全配置
        security {
            httpsOnly = true
            strictTransportSecurity = true
            contentSecurityPolicy = true
        }
    }
}